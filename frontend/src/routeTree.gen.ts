/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PlaylistsIndexImport } from './routes/playlists/index'
import { Route as GenresIndexImport } from './routes/genres/index'
import { Route as ArtistsIndexImport } from './routes/artists/index'
import { Route as AlbumsIndexImport } from './routes/albums/index'
import { Route as AlbumArtistsIndexImport } from './routes/albumArtists/index'
import { Route as PlaylistsNameImport } from './routes/playlists/$name'
import { Route as AlbumsIdImport } from './routes/albums/$id'
import { Route as GenresIdNameImport } from './routes/genres/$id.$name'
import { Route as ArtistsIdNameImport } from './routes/artists/$id.$name'
import { Route as AlbumArtistsIdNameImport } from './routes/albumArtists/$id.$name'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsIndexRoute = PlaylistsIndexImport.update({
  id: '/playlists/',
  path: '/playlists/',
  getParentRoute: () => rootRoute,
} as any)

const GenresIndexRoute = GenresIndexImport.update({
  id: '/genres/',
  path: '/genres/',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsIndexRoute = ArtistsIndexImport.update({
  id: '/artists/',
  path: '/artists/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsIndexRoute = AlbumsIndexImport.update({
  id: '/albums/',
  path: '/albums/',
  getParentRoute: () => rootRoute,
} as any)

const AlbumArtistsIndexRoute = AlbumArtistsIndexImport.update({
  id: '/albumArtists/',
  path: '/albumArtists/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsNameRoute = PlaylistsNameImport.update({
  id: '/playlists/$name',
  path: '/playlists/$name',
  getParentRoute: () => rootRoute,
} as any)

const AlbumsIdRoute = AlbumsIdImport.update({
  id: '/albums/$id',
  path: '/albums/$id',
  getParentRoute: () => rootRoute,
} as any)

const GenresIdNameRoute = GenresIdNameImport.update({
  id: '/genres/$id/$name',
  path: '/genres/$id/$name',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsIdNameRoute = ArtistsIdNameImport.update({
  id: '/artists/$id/$name',
  path: '/artists/$id/$name',
  getParentRoute: () => rootRoute,
} as any)

const AlbumArtistsIdNameRoute = AlbumArtistsIdNameImport.update({
  id: '/albumArtists/$id/$name',
  path: '/albumArtists/$id/$name',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/albums/$id': {
      id: '/albums/$id'
      path: '/albums/$id'
      fullPath: '/albums/$id'
      preLoaderRoute: typeof AlbumsIdImport
      parentRoute: typeof rootRoute
    }
    '/playlists/$name': {
      id: '/playlists/$name'
      path: '/playlists/$name'
      fullPath: '/playlists/$name'
      preLoaderRoute: typeof PlaylistsNameImport
      parentRoute: typeof rootRoute
    }
    '/albumArtists/': {
      id: '/albumArtists/'
      path: '/albumArtists'
      fullPath: '/albumArtists'
      preLoaderRoute: typeof AlbumArtistsIndexImport
      parentRoute: typeof rootRoute
    }
    '/albums/': {
      id: '/albums/'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AlbumsIndexImport
      parentRoute: typeof rootRoute
    }
    '/artists/': {
      id: '/artists/'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsIndexImport
      parentRoute: typeof rootRoute
    }
    '/genres/': {
      id: '/genres/'
      path: '/genres'
      fullPath: '/genres'
      preLoaderRoute: typeof GenresIndexImport
      parentRoute: typeof rootRoute
    }
    '/playlists/': {
      id: '/playlists/'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsIndexImport
      parentRoute: typeof rootRoute
    }
    '/albumArtists/$id/$name': {
      id: '/albumArtists/$id/$name'
      path: '/albumArtists/$id/$name'
      fullPath: '/albumArtists/$id/$name'
      preLoaderRoute: typeof AlbumArtistsIdNameImport
      parentRoute: typeof rootRoute
    }
    '/artists/$id/$name': {
      id: '/artists/$id/$name'
      path: '/artists/$id/$name'
      fullPath: '/artists/$id/$name'
      preLoaderRoute: typeof ArtistsIdNameImport
      parentRoute: typeof rootRoute
    }
    '/genres/$id/$name': {
      id: '/genres/$id/$name'
      path: '/genres/$id/$name'
      fullPath: '/genres/$id/$name'
      preLoaderRoute: typeof GenresIdNameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/playlists/$name': typeof PlaylistsNameRoute
  '/albumArtists': typeof AlbumArtistsIndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/genres': typeof GenresIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
  '/albumArtists/$id/$name': typeof AlbumArtistsIdNameRoute
  '/artists/$id/$name': typeof ArtistsIdNameRoute
  '/genres/$id/$name': typeof GenresIdNameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/playlists/$name': typeof PlaylistsNameRoute
  '/albumArtists': typeof AlbumArtistsIndexRoute
  '/albums': typeof AlbumsIndexRoute
  '/artists': typeof ArtistsIndexRoute
  '/genres': typeof GenresIndexRoute
  '/playlists': typeof PlaylistsIndexRoute
  '/albumArtists/$id/$name': typeof AlbumArtistsIdNameRoute
  '/artists/$id/$name': typeof ArtistsIdNameRoute
  '/genres/$id/$name': typeof GenresIdNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/albums/$id': typeof AlbumsIdRoute
  '/playlists/$name': typeof PlaylistsNameRoute
  '/albumArtists/': typeof AlbumArtistsIndexRoute
  '/albums/': typeof AlbumsIndexRoute
  '/artists/': typeof ArtistsIndexRoute
  '/genres/': typeof GenresIndexRoute
  '/playlists/': typeof PlaylistsIndexRoute
  '/albumArtists/$id/$name': typeof AlbumArtistsIdNameRoute
  '/artists/$id/$name': typeof ArtistsIdNameRoute
  '/genres/$id/$name': typeof GenresIdNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/albums/$id'
    | '/playlists/$name'
    | '/albumArtists'
    | '/albums'
    | '/artists'
    | '/genres'
    | '/playlists'
    | '/albumArtists/$id/$name'
    | '/artists/$id/$name'
    | '/genres/$id/$name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/albums/$id'
    | '/playlists/$name'
    | '/albumArtists'
    | '/albums'
    | '/artists'
    | '/genres'
    | '/playlists'
    | '/albumArtists/$id/$name'
    | '/artists/$id/$name'
    | '/genres/$id/$name'
  id:
    | '__root__'
    | '/'
    | '/albums/$id'
    | '/playlists/$name'
    | '/albumArtists/'
    | '/albums/'
    | '/artists/'
    | '/genres/'
    | '/playlists/'
    | '/albumArtists/$id/$name'
    | '/artists/$id/$name'
    | '/genres/$id/$name'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlbumsIdRoute: typeof AlbumsIdRoute
  PlaylistsNameRoute: typeof PlaylistsNameRoute
  AlbumArtistsIndexRoute: typeof AlbumArtistsIndexRoute
  AlbumsIndexRoute: typeof AlbumsIndexRoute
  ArtistsIndexRoute: typeof ArtistsIndexRoute
  GenresIndexRoute: typeof GenresIndexRoute
  PlaylistsIndexRoute: typeof PlaylistsIndexRoute
  AlbumArtistsIdNameRoute: typeof AlbumArtistsIdNameRoute
  ArtistsIdNameRoute: typeof ArtistsIdNameRoute
  GenresIdNameRoute: typeof GenresIdNameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlbumsIdRoute: AlbumsIdRoute,
  PlaylistsNameRoute: PlaylistsNameRoute,
  AlbumArtistsIndexRoute: AlbumArtistsIndexRoute,
  AlbumsIndexRoute: AlbumsIndexRoute,
  ArtistsIndexRoute: ArtistsIndexRoute,
  GenresIndexRoute: GenresIndexRoute,
  PlaylistsIndexRoute: PlaylistsIndexRoute,
  AlbumArtistsIdNameRoute: AlbumArtistsIdNameRoute,
  ArtistsIdNameRoute: ArtistsIdNameRoute,
  GenresIdNameRoute: GenresIdNameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/albums/$id",
        "/playlists/$name",
        "/albumArtists/",
        "/albums/",
        "/artists/",
        "/genres/",
        "/playlists/",
        "/albumArtists/$id/$name",
        "/artists/$id/$name",
        "/genres/$id/$name"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/albums/$id": {
      "filePath": "albums/$id.tsx"
    },
    "/playlists/$name": {
      "filePath": "playlists/$name.tsx"
    },
    "/albumArtists/": {
      "filePath": "albumArtists/index.tsx"
    },
    "/albums/": {
      "filePath": "albums/index.tsx"
    },
    "/artists/": {
      "filePath": "artists/index.tsx"
    },
    "/genres/": {
      "filePath": "genres/index.tsx"
    },
    "/playlists/": {
      "filePath": "playlists/index.tsx"
    },
    "/albumArtists/$id/$name": {
      "filePath": "albumArtists/$id.$name.tsx"
    },
    "/artists/$id/$name": {
      "filePath": "artists/$id.$name.tsx"
    },
    "/genres/$id/$name": {
      "filePath": "genres/$id.$name.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
