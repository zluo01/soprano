scalar Long

type Song {
    name: String!
    artists: String!
    albumId: Int!
    album: String!
    path: String!
    date : String
    genre : String
    composer  : String
    performer : String
    disc : Int!
    trackNum : Int!
    duration : Int!
    modifiedTime : Long!
    addTime   : Long!
}

type PlaylistSong {
    name: String!
    artists: String!
    albumId: Int!
    album: String!
    path: String!
    date : String
    genre : String
    composer  : String
    performer : String
    disc : Int!
    trackNum : Int!
    duration : Int!
    modifiedTime : Long!
    addTime   : Long!
    position: Int!
    playing: Boolean!
}

type Album {
    id: Int!
    name: String!
    date: String!
    artist: String!
    songs: [Song!]!
    addTime: Long!
    modifiedTime: Long!
    totalDuration: Int!
}

type AlbumLite {
    id: Int!
    name: String!
    artist: String!
    date: String!
    addTime: Long!
    modifiedTime: Long!
    totalDuration: Int!
}

type Genre {
    id: Int!
    name: String!
    albumCount: Int!
}

type Artist {
    id: Int!
    name: String!
    albumCount: Int!
}

type AlbumArtist {
    id: Int!
    name: String!
    albumCount: Int!
}

type Playlist {
    name: String!
    modifiedTime: Long!
    songCount: Int!
    coverId: Int
}

type Stats {
    albums: Int!
    artists: Int!
    songs: Int!
}

type SearchResult {
    songs: [Song!]!
    albums: [AlbumLite!]!
    artists: [AlbumArtist!]!
}

type PlaybackStatus {
    playing: Boolean!
    elapsed: Int!
    song: Song
}

type Query {
    Song(path: String!): Song!
    Songs (paths: [String!]!): [Song!]!

    Albums: [Album!]!
    Album (id: Int!): Album!

    Genres: [Genre!]
    GenreAlbums (id: Int!): [AlbumLite!]!

    AlbumArtists: [AlbumArtist!]
    AlbumArtistAlbums (id: Int!): [AlbumLite!]!

    Artists: [Artist!]
    ArtistAlbums (id: Int!): [AlbumLite!]!

    Playlists: [Playlist!]
    PlaylistSongs (name: String!): [Song!]!

    Stats: Stats!

    Search (key: String!): SearchResult!

    # player
    SongsInQueue: [PlaylistSong!]!
    PlaybackStatus: PlaybackStatus!
}

type Mutation {
    Update: Boolean
    Build: Boolean

    # playlists
    CreatePlaylist(name: String!): Boolean!
    DeletePlaylist(name: String!): Boolean!
    RenamePlaylist(name: String!, newName: String!): Boolean!
    AddSongToPlaylist(name: String!, songPath: String!): Boolean!
    DeleteSongFromPlaylist(name: String!, songPath: String!): Boolean!

    # player
    PlaySong(songPath: String!): Int!
    PlayPlaylist(playlistName: String!): Int!
    PlayAlbum(id: Int!): Int!
    PauseSong: Int!
    NextSong: Int!
    PrevSong: Int!
    PlaySongInQueueAtPosition(position: Int!): Int!
    AddSongsToQueue(songPaths: [String!]!): Int!
    RemoveSongFromQueue(position: Int!): Int!
    ClearQueue: Int!
}
